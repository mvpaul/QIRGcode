import numpy as np
import matplotlib.pyplot as plt
from scipy.special import jv

class MZMBesselAnalyzer:
    """
    MZM Frequency-Domain Analyzer using Bessel Expansion
    Allows six independent betas (three per arm) and visualizes spectra.
    """
    def __init__(self, fm=1e9, max_order=6):
        self.fm = fm
        self.omega_m = 2 * np.pi * fm
        self.max_order = max_order
        self.freq_orders = np.arange(-10, 11)  # -10 to +10

    def bessel_spectrum(self, betas, phis):
        # betas, phis: arrays of length 3
        spectrum = {}
        for n1 in range(-self.max_order, self.max_order+1):
            for n2 in range(-self.max_order, self.max_order+1):
                for n3 in range(-self.max_order, self.max_order+1):
                    order = n1 + 2*n2 + 3*n3
                    if order in self.freq_orders:
                        amp = jv(n1, betas[0]) * jv(n2, betas[1]) * jv(n3, betas[2])
                        if abs(amp) > 1e-8:
                            phase = n1*phis[0] + n2*phis[1] + n3*phis[2]
                            val = amp * np.exp(1j*phase)
                            if order in spectrum:
                                spectrum[order] += val
                            else:
                                spectrum[order] = val
        return spectrum

    def mzm_spectra(self, betas_upper, phis_upper, betas_lower, phis_lower, delta_phi):
        # Calculate spectra for each arm and combined output
        upper = self.bessel_spectrum(betas_upper, phis_upper)
        lower = self.bessel_spectrum(betas_lower, phis_lower)
        # Lower arm gets extra phase delta_phi
        lower = {k: v * np.exp(1j*delta_phi) for k, v in lower.items()}
        # Combined output
        combined = {k: upper.get(k,0) + lower.get(k,0) for k in self.freq_orders}
        return upper, lower, combined

    def get_amplitudes(self, combined):
        # Returns a dict of {order: amplitude}
        return {k: np.abs(v) for k, v in combined.items()}

if __name__ == "__main__":
    np.random.seed(42)
    analyzer = MZMBesselAnalyzer(fm=1e9, max_order=6)
    alpha = 2  # penalty weight for -1, -2, -3
    beta = 1   # penalty weight for other unwanted sidebands
    results = []
    for i in range(20):
        betas_upper = np.random.uniform(0.2, 1.5, 3)
        phis_upper = np.random.uniform(0, 2*np.pi, 3)
        betas_lower = np.random.uniform(0.2, 1.5, 3)
        phis_lower = np.random.uniform(0, 2*np.pi, 3)
        delta_phi = np.random.uniform(0, 2*np.pi)
        _, _, combined = analyzer.mzm_spectra(
            betas_upper, phis_upper, betas_lower, phis_lower, delta_phi)
        amps = analyzer.get_amplitudes(combined)
        carrier = amps.get(0, 0)
        plus1 = amps.get(1, 0)
        plus2 = amps.get(2, 0)
        plus3 = amps.get(3, 0)
        minus1 = amps.get(-1, 0)
        minus2 = amps.get(-2, 0)
        minus3 = amps.get(-3, 0)
        # Unwanted: all sidebands except 0, +1, +2, +3, -1, -2, -3
        other_unwanted = [amps.get(k, 0) for k in amps if k not in [0, 1, 2, 3, -1, -2, -3]]
        sum_other_unwanted = sum(other_unwanted)
        sum_minus = minus1 + minus2 + minus3
        score = (plus1 + plus2 + plus3) - alpha * sum_minus - beta * sum_other_unwanted
        results.append({
            'index': i+1,
            'betas_upper': betas_upper,
            'phis_upper': phis_upper,
            'betas_lower': betas_lower,
            'phis_lower': phis_lower,
            'delta_phi': delta_phi,
            'carrier': carrier,
            '+1': plus1,
            '+2': plus2,
            '+3': plus3,
            '-1': minus1,
            '-2': minus2,
            '-3': minus3,
            'sum_minus': sum_minus,
            'sum_other_unwanted': sum_other_unwanted,
            'score': score
        })
    print("\nResults for 20 Random Parameter Sets:")
    for r in results:
        print(f"Set {r['index']}:")
        print(f"  betas_upper: {r['betas_upper']}")
        print(f"  phis_upper: {r['phis_upper']}")
        print(f"  betas_lower: {r['betas_lower']}")
        print(f"  phis_lower: {r['phis_lower']}")
        print(f"  delta_phi: {r['delta_phi']:.3f}")
        print(f"  Carrier: {r['carrier']:.3f}")
        print(f"  +1: {r['+1']:.3f}")
        print(f"  +2: {r['+2']:.3f}")
        print(f"  +3: {r['+3']:.3f}")
        print(f"  -1: {r['-1']:.3f}")
        print(f"  -2: {r['-2']:.3f}")
        print(f"  -3: {r['-3']:.3f}")
        print(f"  Sum of -1,-2,-3: {r['sum_minus']:.3f}")
        print(f"  Sum of other unwanted sidebands: {r['sum_other_unwanted']:.3f}")
        print(f"  Score: {r['score']:.3f}\n")
    # Find the best set (highest score)
    best = max(results, key=lambda r: r['score'])
    print(f"Best set is Set {best['index']} (score = {best['score']:.3f})")
    print(f"  betas_upper: {best['betas_upper']}")
    print(f"  phis_upper: {best['phis_upper']}")
    print(f"  betas_lower: {best['betas_lower']}")
    print(f"  phis_lower: {best['phis_lower']}")
    print(f"  delta_phi: {best['delta_phi']:.3f}")
    print(f"  Carrier: {best['carrier']:.3f}")
    print(f"  +1: {best['+1']:.3f}")
    print(f"  +2: {best['+2']:.3f}")
    print(f"  +3: {best['+3']:.3f}")
    print(f"  -1: {best['-1']:.3f}")
    print(f"  -2: {best['-2']:.3f}")
    print(f"  -3: {best['-3']:.3f}")
    print(f"  Sum of -1,-2,-3: {best['sum_minus']:.3f}")
    print(f"  Sum of other unwanted sidebands: {best['sum_other_unwanted']:.3f}")
    print(f"  Score: {best['score']:.3f}")

# === PHASE-ONLY OPTIMIZER WITH FIXED BETAS ===
from scipy.optimize import minimize

# User's fixed betas (from your best manual set)
betas_upper_fixed = np.array([0.5911418, 0.57029264, 0.43456265])
betas_lower_fixed = np.array([0.45, 1.1, 0])

# Initial guess: your best manual phases
phis_upper_init = np.array([2.35619449, 3.4906585, 0.32345053])
phis_lower_init = np.array([0.91040133, 3.07532239, 2.35619449])
delta_phi_init = 2.69056597

# Cost function: maximize +1, +2, +3, suppress all others
lambda_penalty = 4.0

# --- Modified cost function: maximize the minimum of +1, +2, +3, and penalize if they differ by more than epsilon ---
epsilon = 0.03  # allowed difference between +1, +2, +3 amplitudes
mu = 300         # penalty weight for mismatch

# Cost function explanation:
#   - Maximizes the minimum of the +1, +2, +3 sideband amplitudes
#   - Adds a penalty if any pair differs by more than epsilon
#   - Still penalizes unwanted sidebands as before

def phase_cost(phases):
    phis_upper = phases[:3]
    phis_lower = phases[3:6]
    delta_phi = phases[6]
    _, _, combined = analyzer.mzm_spectra(
        betas_upper_fixed, phis_upper, betas_lower_fixed, phis_lower, delta_phi)
    amps = analyzer.get_amplitudes(combined)
    a1, a2, a3 = amps.get(1, 0), amps.get(2, 0), amps.get(3, 0)
    unwanted = sum(amps.get(k, 0) for k in amps if k not in [1, 2, 3])
    # Penalty for mismatch
    penalty = (
        max(0, abs(a1 - a2) - epsilon) +
        max(0, abs(a1 - a3) - epsilon) +
        max(0, abs(a2 - a3) - epsilon)
    )
    return -min(a1, a2, a3) + lambda_penalty * unwanted + mu * penalty

# Bounds: all phases in [0, 2pi]
bounds = [(0, 2*np.pi)]*7

# Initial vector
x0 = np.concatenate([phis_upper_init, phis_lower_init, [delta_phi_init]])

print("\n=== Phase-Only Optimization (Fixed Betas) ===")
result = minimize(phase_cost, x0, bounds=bounds, method='L-BFGS-B', options={'maxiter': 300, 'disp': True})
opt_phases = result.x
phis_upper_opt = opt_phases[:3]
phis_lower_opt = opt_phases[3:6]
delta_phi_opt = opt_phases[6]

print("\nOptimal phases found:")
print(f"  phis_upper: {[f'{p:.4f}' for p in phis_upper_opt]}")
print(f"  phis_lower: {[f'{p:.4f}' for p in phis_lower_opt]}")
print(f"  delta_phi: {delta_phi_opt:.4f}")

# Show resulting spectrum
upper, lower, combined = analyzer.mzm_spectra(
    betas_upper_fixed, phis_upper_opt, betas_lower_fixed, phis_lower_opt, delta_phi_opt)

# Plot only the combined output spectrum
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(12, 4))
orders = analyzer.freq_orders
amps = [np.abs(combined.get(k, 0)) for k in orders]
phases = [np.angle(combined.get(k, 0), deg=True) for k in orders]
bars = ax.bar(orders, amps, color='skyblue', edgecolor='k', width=0.7)
for i, (bar, phase, amp) in enumerate(zip(bars, phases, amps)):
    if amp > max(amps)*0.02:
        ax.text(bar.get_x() + bar.get_width()/2., amp + max(amps)*0.02,
                f'{amp:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
        ax.text(bar.get_x() + bar.get_width()/2., -max(amps)*0.08,
                f'{phase:.0f}Â°', ha='center', va='top', fontsize=10, color='purple', fontweight='bold')
ax.set_title('Combined Output Spectrum (Optimized Phases)', fontsize=14, fontweight='bold')
ax.set_xlabel('Sideband Order (n)')
ax.set_ylabel('Amplitude')
ax.set_xticks(orders)
ax.set_xlim(-10, 10)
ax.grid(True, alpha=0.3, axis='y')
ax.set_ylim(bottom=-max(amps)*0.15)
plt.tight_layout()
plt.show()

# === BETAS AND PHASES OPTIMIZER ===
from scipy.optimize import minimize

# Bounds for betas (chosen based on previous random search)
beta_bounds = [(0.2, 1.5)]*3 + [(0.2, 1.5)]*3  # 3 for upper, 3 for lower
# Bounds for phases (all in [0, 2pi])
phase_bounds = [(0, 2*np.pi)]*3 + [(0, 2*np.pi)]*3 + [(0, 2*np.pi)]  # 3 upper, 3 lower, delta_phi
# Full bounds: betas_upper, betas_lower, phis_upper, phis_lower, delta_phi
full_bounds = beta_bounds + phase_bounds

# Initial guess: concatenate previous best betas and phases
x0_betas = np.concatenate([betas_upper_fixed, betas_lower_fixed])
x0_phases = np.concatenate([phis_upper_init, phis_lower_init, [delta_phi_init]])
x0_full = np.concatenate([x0_betas, x0_phases])

def beta_phase_cost(x):
    betas_upper = x[:3]
    betas_lower = x[3:6]
    phis_upper = x[6:9]
    phis_lower = x[9:12]
    delta_phi = x[12]
    _, _, combined = analyzer.mzm_spectra(
        betas_upper, phis_upper, betas_lower, phis_lower, delta_phi)
    amps = analyzer.get_amplitudes(combined)
    a1, a2, a3 = amps.get(1, 0), amps.get(2, 0), amps.get(3, 0)
    unwanted = sum(amps.get(k, 0) for k in amps if k not in [1, 2, 3])
    # Penalty for mismatch
    penalty = (
        max(0, abs(a1 - a2) - epsilon) +
        max(0, abs(a1 - a3) - epsilon) +
        max(0, abs(a2 - a3) - epsilon)
    )
    return -min(a1, a2, a3) + lambda_penalty * unwanted + mu * penalty

print("\n=== Betas and Phases Optimization ===")
result_full = minimize(beta_phase_cost, x0_full, bounds=full_bounds, method='L-BFGS-B', options={'maxiter': 400, 'disp': True})
opt = result_full.x
betas_upper_opt = opt[:3]
betas_lower_opt = opt[3:6]
phis_upper_opt = opt[6:9]
phis_lower_opt = opt[9:12]
delta_phi_opt = opt[12]

print("\nOptimal betas and phases found:")
print(f"  betas_upper: {[f'{b:.4f}' for b in betas_upper_opt]}")
print(f"  betas_lower: {[f'{b:.4f}' for b in betas_lower_opt]}")
print(f"  phis_upper: {[f'{p:.4f}' for p in phis_upper_opt]}")
print(f"  phis_lower: {[f'{p:.4f}' for p in phis_lower_opt]}")
print(f"  delta_phi: {delta_phi_opt:.4f}")

# Show resulting spectrum
upper, lower, combined = analyzer.mzm_spectra(
    betas_upper_opt, phis_upper_opt, betas_lower_opt, phis_lower_opt, delta_phi_opt)

# Plot only the combined output spectrum
fig, ax = plt.subplots(figsize=(12, 4))
orders = analyzer.freq_orders
amps = [np.abs(combined.get(k, 0)) for k in orders]
phases = [np.angle(combined.get(k, 0), deg=True) for k in orders]
bars = ax.bar(orders, amps, color='lightgreen', edgecolor='k', width=0.7)
for i, (bar, phase, amp) in enumerate(zip(bars, phases, amps)):
    if amp > max(amps)*0.02:
        ax.text(bar.get_x() + bar.get_width()/2., amp + max(amps)*0.02,
                f'{amp:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
        ax.text(bar.get_x() + bar.get_width()/2., -max(amps)*0.08,
                f'{phase:.0f}Â°', ha='center', va='top', fontsize=10, color='purple', fontweight='bold')
ax.set_title('Combined Output Spectrum (Optimized Betas & Phases)', fontsize=14, fontweight='bold')
ax.set_xlabel('Sideband Order (n)')
ax.set_ylabel('Amplitude')
ax.set_xticks(orders)
ax.set_xlim(-10, 10)
ax.grid(True, alpha=0.3, axis='y')
ax.set_ylim(bottom=-max(amps)*0.15)
plt.tight_layout()
plt.show()