import numpy as np
import matplotlib.pyplot as plt
from scipy.special import jv

class MZMBesselAnalyzer:
    """
    MZM Frequency-Domain Analyzer using Bessel Expansion
    Allows six independent betas (three per arm) and visualizes spectra.
    """
    def __init__(self, fm=1e9, max_order=6):
        self.fm = fm
        self.omega_m = 2 * np.pi * fm
        self.max_order = max_order
        self.freq_orders = np.arange(-10, 11)  # -10 to +10

    def bessel_spectrum(self, betas, phis):
        # betas, phis: arrays of length 3
        spectrum = {}
        for n1 in range(-self.max_order, self.max_order+1):
            for n2 in range(-self.max_order, self.max_order+1):
                for n3 in range(-self.max_order, self.max_order+1):
                    order = n1 + 2*n2 + 3*n3
                    if order in self.freq_orders:
                        amp = jv(n1, betas[0]) * jv(n2, betas[1]) * jv(n3, betas[2])
                        if abs(amp) > 1e-8:
                            phase = n1*phis[0] + n2*phis[1] + n3*phis[2]
                            val = amp * np.exp(1j*phase)
                            if order in spectrum:
                                spectrum[order] += val
                            else:
                                spectrum[order] = val
        return spectrum

    def mzm_spectra(self, betas_upper, phis_upper, betas_lower, phis_lower, delta_phi):
        # Calculate spectra for each arm and combined output
        upper = self.bessel_spectrum(betas_upper, phis_upper)
        lower = self.bessel_spectrum(betas_lower, phis_lower)
        # Lower arm gets extra phase delta_phi
        lower = {k: v * np.exp(1j*delta_phi) for k, v in lower.items()}
        # Combined output
        combined = {k: upper.get(k,0) + lower.get(k,0) for k in self.freq_orders}
        return upper, lower, combined

    def plot_spectra(self, upper, lower, combined):
        fig, axes = plt.subplots(3, 1, figsize=(12, 12))
        for ax, spec, title in zip(axes, [upper, lower, combined],
                                   ["Upper Arm Spectrum", "Lower Arm Spectrum", "Combined Output Spectrum"]):
            amps = [np.abs(spec.get(k,0)) for k in self.freq_orders]
            phases = [np.angle(spec.get(k,0), deg=True) for k in self.freq_orders]
            bars = ax.bar(self.freq_orders, amps, color='skyblue', edgecolor='k', width=0.7)
            for i, (bar, phase, amp) in enumerate(zip(bars, phases, amps)):
                if amp > max(amps)*0.02:
                    ax.text(bar.get_x() + bar.get_width()/2., amp + max(amps)*0.02,
                            f'{amp:.3f}', ha='center', va='bottom', fontsize=10, fontweight='bold')
                    ax.text(bar.get_x() + bar.get_width()/2., -max(amps)*0.08,
                            f'{phase:.0f}Â°', ha='center', va='top', fontsize=10, color='purple', fontweight='bold')
            ax.set_title(title, fontsize=14, fontweight='bold')
            ax.set_xlabel('Sideband Order (n)')
            ax.set_ylabel('Amplitude')
            ax.set_xticks(self.freq_orders)
            ax.set_xlim(-10, 10)
            ax.grid(True, alpha=0.3, axis='y')
            ax.set_ylim(bottom=-max(amps)*0.15)
        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    print("\n=== Manual Six-Beta MZM Spectrum Explorer ===")
    analyzer = MZMBesselAnalyzer(fm=1e9, max_order=6)
    # === USER: Set phases here ===
    phis_upper = [2.35619449, 3.4906585, 0.32345053]  # Change these to adjust upper arm phases
    phis_lower = [0.91040133, 3.07532239, 2.35619449]  # Change these to adjust lower arm phases
    delta_phi = 2.69056597 # Change this to adjust the relative phase between arms
    # ============================
    # Fixed betas from user
    betas_upper = [0.5911418, 0.57029264, 0.43456265]
    betas_lower = [0.45, 1.1, 0]
    upper, lower, combined = analyzer.mzm_spectra(betas_upper, phis_upper, betas_lower, phis_lower, delta_phi)
    analyzer.plot_spectra(upper, lower, combined)